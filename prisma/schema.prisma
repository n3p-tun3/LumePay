// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  intents       Intent[]
  payments      Payment[]
  settings      Json?     // For storing bank details and other settings
  apiKeys       ApiKey[]
  bankAccount   String?
  bankName      String?   @default("CBE")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Intent {
  id            String    @id @default(cuid())
  userId        String
  amount        Float
  status        String    @default("pending") // pending, completed, expired
  customerEmail String?
  metadata      Json?
  createdAt     DateTime  @default(now())
  expiresAt     DateTime
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment       Payment?
}

model Payment {
  id              String   @id @default(cuid())
  userId          String
  intentId        String   @unique
  amount          Float
  transactionId   String   @unique
  status          String   // completed, failed
  verificationData Json?
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  intent          Intent   @relation(fields: [intentId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id                String   @id @default(cuid())
  name              String   @default("Default Key")
  key               String   @unique
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  remainingCredits  Int      @default(100)
  enabled           Boolean  @default(true)
  rateLimitEnabled  Boolean  @default(true)
  rateLimitTimeWindow Int    @default(86400000) // 24 hours in milliseconds
  rateLimitMax      Int      @default(1000)
  lastUsedAt        DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
  @@index([key])
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json     // This will store the waitlist config as { enabled: boolean, message: string }
  description String?
  updatedAt   DateTime @updatedAt
  updatedBy   String?  // Email of the admin who last updated the setting
}

model WaitlistEntry {
  id         String    @id @default(cuid())
  email      String    @unique
  name       String?
  status     String    @default("pending") // pending, approved, rejected
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  approvedAt DateTime?
}
